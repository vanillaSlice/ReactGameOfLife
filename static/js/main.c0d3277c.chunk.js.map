{"version":3,"sources":["components/Button/index.jsx","components/MainControls/index.jsx","components/Board/index.jsx","components/Cell/index.jsx","components/ControlLabel/index.jsx","components/ToggleButton/index.jsx","components/SpeedControls/index.jsx","components/BoardSizeControls/index.jsx","components/App/index.jsx","index.js"],"names":["Button","props","id","onClick","text","react_default","a","createElement","className","type","MainControls","onPlayButtonClick","onPauseButtonClick","onResetButtonClick","onClearButtonClick","src_components_Button","Board","cells","map","row","i","key","concat","Cell","alive","emoji","dangerouslySetInnerHTML","__html","defaultProps","ControlLabel","ToggleButton","name","onChange","checked","htmlFor","SpeedControls","speed","src_components_ControlLabel","src_components_ToggleButton","BoardSizeControls","columns","rows","getNextGenerationOfCells","prevState","rowIndex","cell","columnIndex","aliveNeighbours","numberOfRows","numberOfColumns","north","east","south","west","countAliveNeighbours","src_components_Cell","getCellInNextGeneration","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isPlaying","generation","getNewCells","bind","assertThisInitialized","getNewCell","handleCellClick","handlePlayButtonClick","nextGeneration","handlePauseButtonClick","handleResetButtonClick","handleClearButtonClick","handleSpeedChange","handleBoardSizeChange","_this$state","setState","push","_this2","Math","floor","random","updatedCell","_this$state2","interval","clearInterval","setInterval","_this$state3","_this$state4","_this$state5","_this$state6","_this$state7","role","aria-label","components_MainControls","src_components_Board","components_SpeedControls","components_BoardSizeControls","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0d3277c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nconst Button = (props) => {\n  const { id, onClick, text } = props;\n\n  return (\n    <button id={id} className=\"btn\" type=\"button\" onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  id: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../Button';\n\nconst MainControls = (props) => {\n  const {\n    onPlayButtonClick,\n    onPauseButtonClick,\n    onResetButtonClick,\n    onClearButtonClick,\n  } = props;\n\n  return (\n    <div className=\"main-ctrls\">\n      <Button id=\"play\" text=\"Play\" onClick={onPlayButtonClick} />\n      <Button id=\"pause\" text=\"Pause\" onClick={onPauseButtonClick} />\n      <Button id=\"reset\" text=\"Reset\" onClick={onResetButtonClick} />\n      <Button id=\"clear\" text=\"Clear\" onClick={onClearButtonClick} />\n    </div>\n  );\n};\n\nMainControls.propTypes = {\n  onPlayButtonClick: PropTypes.func.isRequired,\n  onPauseButtonClick: PropTypes.func.isRequired,\n  onResetButtonClick: PropTypes.func.isRequired,\n  onClearButtonClick: PropTypes.func.isRequired,\n};\n\nexport default MainControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nconst Board = (props) => {\n  const { cells } = props;\n  return (\n    <div className=\"board\">\n      {cells.map((row, i) => (\n        <div className=\"board__row\" key={`row-${i + 1}`}>{row}</div>\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  cells: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.element)).isRequired,\n};\n\nexport default Board;\n","/*\n  eslint-disable\n  react/no-danger,\n  jsx-a11y/click-events-have-key-events,\n  jsx-a11y/no-static-element-interactions\n*/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nconst Cell = (props) => {\n  const { onClick, alive, emoji } = props;\n\n  return (\n    <div className=\"cell\" onClick={onClick}>\n      {alive && <span className=\"cell__emoji\" dangerouslySetInnerHTML={{ __html: emoji }} />}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  alive: PropTypes.bool,\n  emoji: PropTypes.node.isRequired,\n};\n\nCell.defaultProps = {\n  alive: false,\n};\n\nexport default Cell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nconst ControlLabel = (props) => {\n  const { text } = props;\n\n  return (\n    <span className=\"ctrl-label\">{text}</span>\n  );\n};\n\nControlLabel.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default ControlLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.css';\n\nconst ToggleButton = (props) => {\n  const {\n    id,\n    name,\n    onChange,\n    checked,\n    text,\n  } = props;\n\n  return (\n    <label className=\"toggle-btn\" htmlFor={id}>\n      <input\n        className=\"toggle-btn__input\"\n        type=\"radio\"\n        id={id}\n        name={name}\n        onChange={onChange}\n        checked={checked}\n      />\n      <span className=\"toggle-btn__text\">\n        {text}\n      </span>\n    </label>\n  );\n};\n\nToggleButton.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  checked: PropTypes.bool,\n  text: PropTypes.string.isRequired,\n};\n\nToggleButton.defaultProps = {\n  checked: false,\n};\n\nexport default ToggleButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ControlLabel from '../ControlLabel';\nimport ToggleButton from '../ToggleButton';\n\nconst SpeedControls = (props) => {\n  const { speed, onChange } = props;\n\n  return (\n    <div className=\"speed-ctrls\">\n      <ControlLabel text=\"Speed:\" />\n      <ToggleButton\n        text=\"Slow\"\n        onChange={() => onChange(1000)}\n        id=\"slow\"\n        checked={speed === 1000}\n        name=\"speed\"\n      />\n      <ToggleButton\n        text=\"Medium\"\n        onChange={() => onChange(500)}\n        id=\"medium\"\n        checked={speed === 500}\n        name=\"speed\"\n      />\n      <ToggleButton\n        text=\"Fast\"\n        onChange={() => onChange(300)}\n        id=\"fast\"\n        checked={speed === 300}\n        name=\"speed\"\n      />\n      <ToggleButton\n        text=\"Fastest\"\n        onChange={() => onChange(100)}\n        id=\"fastest\"\n        checked={speed === 100}\n        name=\"speed\"\n      />\n    </div>\n  );\n};\n\nSpeedControls.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  speed: PropTypes.number.isRequired,\n};\n\nexport default SpeedControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ControlLabel from '../ControlLabel';\nimport ToggleButton from '../ToggleButton';\n\nconst BoardSizeControls = (props) => {\n  const { columns, rows, onChange } = props;\n\n  return (\n    <div className=\"board-size-ctrls\">\n      <ControlLabel text=\"Board Size:\" />\n      <ToggleButton\n        text=\"10x10\"\n        onChange={() => onChange(10, 10)}\n        id=\"_10x10\"\n        checked={columns === 10 && rows === 10}\n        name=\"board-size\"\n      />\n      <ToggleButton\n        text=\"20x20\"\n        onChange={() => onChange(20, 20)}\n        id=\"_20x20\"\n        checked={columns === 20 && rows === 20}\n        name=\"board-size\"\n      />\n      <ToggleButton\n        text=\"40x20\"\n        onChange={() => onChange(20, 40)}\n        id=\"_40x20\"\n        checked={columns === 40 && rows === 20}\n        name=\"board-size\"\n      />\n    </div>\n  );\n};\n\nBoardSizeControls.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  columns: PropTypes.number.isRequired,\n  rows: PropTypes.number.isRequired,\n};\n\nexport default BoardSizeControls;\n","import React, { Component } from 'react';\n\nimport MainControls from '../MainControls';\nimport Board from '../Board';\nimport Cell from '../Cell';\nimport SpeedControls from '../SpeedControls';\nimport BoardSizeControls from '../BoardSizeControls';\n\nimport './index.css';\n\nfunction getRandomEmoji() {\n  return `&#${(Math.floor(Math.random() * (128567 - 128514)) + 128513)};`;\n}\n\nfunction getRandomBoolean() {\n  return Math.random() >= 0.5;\n}\n\nfunction countAliveNeighbours(rowIndex, columnIndex, prevState) {\n  const { cells } = prevState;\n  const numberOfRows = prevState.rows;\n  const numberOfColumns = prevState.columns;\n  // wrap around indices eg in 5x5 board (-1,-1) would become (4,4)\n  const north = ((rowIndex - 1) + numberOfRows) % numberOfRows;\n  const east = (columnIndex + 1 + numberOfColumns) % numberOfColumns;\n  const south = (rowIndex + 1 + numberOfRows) % numberOfRows;\n  const west = ((columnIndex - 1) + numberOfColumns) % numberOfColumns;\n\n  let aliveNeighbours = 0;\n\n  if (cells[north][columnIndex].props.alive) {\n    aliveNeighbours += 1;\n  }\n  if (cells[north][east].props.alive) {\n    aliveNeighbours += 1;\n  }\n  if (cells[rowIndex][east].props.alive) {\n    aliveNeighbours += 1;\n  }\n  if (cells[south][east].props.alive) {\n    aliveNeighbours += 1;\n  }\n  if (cells[south][columnIndex].props.alive) {\n    aliveNeighbours += 1;\n  }\n  if (cells[south][west].props.alive) {\n    aliveNeighbours += 1;\n  }\n  if (cells[rowIndex][west].props.alive) {\n    aliveNeighbours += 1;\n  }\n  if (cells[north][west].props.alive) {\n    aliveNeighbours += 1;\n  }\n\n  return aliveNeighbours;\n}\n\nfunction getCellInNextGeneration(rowIndex, columnIndex, cell, prevState) {\n  const aliveNeighbours = countAliveNeighbours(rowIndex, columnIndex, prevState);\n  const alive = (cell.props.alive && aliveNeighbours === 2) || aliveNeighbours === 3;\n\n  return (\n    <Cell\n      key={cell.key}\n      emoji={cell.props.emoji}\n      alive={alive}\n      onClick={cell.props.onClick}\n    />\n  );\n}\n\nfunction getNextGenerationOfCells(prevState) {\n  return prevState.cells.map((row, rowIndex) => row\n    .map((cell, columnIndex) => getCellInNextGeneration(rowIndex, columnIndex, cell, prevState)));\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isPlaying: false,\n      generation: 0,\n      cells: [],\n      speed: 500,\n      rows: 20,\n      columns: 40,\n    };\n\n    this.getNewCells = this.getNewCells.bind(this);\n    this.getNewCell = this.getNewCell.bind(this);\n    this.handleCellClick = this.handleCellClick.bind(this);\n    this.handlePlayButtonClick = this.handlePlayButtonClick.bind(this);\n    this.nextGeneration = this.nextGeneration.bind(this);\n    this.handlePauseButtonClick = this.handlePauseButtonClick.bind(this);\n    this.handleResetButtonClick = this.handleResetButtonClick.bind(this);\n    this.handleClearButtonClick = this.handleClearButtonClick.bind(this);\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\n    this.handleBoardSizeChange = this.handleBoardSizeChange.bind(this);\n  }\n\n  componentWillMount() {\n    const { rows, columns } = this.state;\n    this.setState({\n      cells: this.getNewCells(rows, columns),\n    });\n  }\n\n  getNewCells(rows, columns) {\n    const cells = [];\n\n    for (let rowIndex = 0; rowIndex < rows; rowIndex += 1) {\n      const row = [];\n\n      for (let columnIndex = 0; columnIndex < columns; columnIndex += 1) {\n        const cell = this.getNewCell(rowIndex, columnIndex);\n        row.push(cell);\n      }\n\n      cells.push(row);\n    }\n\n    return cells;\n  }\n\n  getNewCell(rowIndex, columnIndex) {\n    return (\n      <Cell\n        key={`${rowIndex}-${columnIndex}`}\n        emoji={getRandomEmoji()}\n        alive={getRandomBoolean()}\n        onClick={() => this.handleCellClick(rowIndex, columnIndex)}\n      />\n    );\n  }\n\n  handleCellClick(rowIndex, columnIndex) {\n    this.setState((prevState) => {\n      const { cells } = prevState;\n      const cell = cells[rowIndex][columnIndex];\n      const updatedCell = (\n        <Cell\n          key={cell.key}\n          emoji={cell.props.emoji}\n          alive={!cell.props.alive}\n          onClick={cell.props.onClick}\n        />\n      );\n\n      cells[rowIndex][columnIndex] = updatedCell;\n\n      return { cells };\n    });\n  }\n\n  handlePlayButtonClick() {\n    const { isPlaying, interval, speed } = this.state;\n\n    if (isPlaying) {\n      return;\n    }\n\n    clearInterval(interval);\n    this.setState({\n      isPlaying: true,\n      interval: setInterval(this.nextGeneration, speed),\n    });\n  }\n\n  nextGeneration() {\n    this.setState(prevState => ({\n      generation: prevState.generation + 1,\n      cells: getNextGenerationOfCells(prevState),\n    }));\n  }\n\n  handlePauseButtonClick() {\n    const { isPlaying, interval } = this.state;\n\n    if (!isPlaying) {\n      return;\n    }\n\n    clearInterval(interval);\n    this.setState({ isPlaying: false });\n  }\n\n  handleResetButtonClick() {\n    const { interval, rows, columns } = this.state;\n\n    clearInterval(interval);\n    this.setState({\n      isPlaying: false,\n      generation: 0,\n      cells: this.getNewCells(rows, columns),\n    });\n  }\n\n  handleClearButtonClick() {\n    const { interval } = this.state;\n\n    clearInterval(interval);\n    this.setState((prevState) => {\n      const updatedCells = prevState.cells.map(row => row.map(cell => (\n        <Cell\n          key={cell.key}\n          emoji={cell.props.emoji}\n          alive={false}\n          onClick={cell.props.onClick}\n        />)));\n\n      return {\n        generation: 0,\n        isPlaying: false,\n        cells: updatedCells,\n      };\n    });\n  }\n\n  handleSpeedChange(speed) {\n    const { isPlaying, interval } = this.state;\n\n    this.setState({ speed });\n\n    if (!isPlaying) {\n      return;\n    }\n\n    clearInterval(interval);\n    this.setState({\n      isPlaying: true,\n      interval: setInterval(this.nextGeneration, speed),\n    });\n  }\n\n  handleBoardSizeChange(rows, columns) {\n    const { isPlaying, interval, speed } = this.state;\n\n    this.setState({\n      generation: 0,\n      cells: this.getNewCells(rows, columns),\n      rows,\n      columns,\n    });\n\n    if (!isPlaying) {\n      return;\n    }\n\n    clearInterval(interval);\n    this.setState({\n      isPlaying: true,\n      interval: setInterval(this.nextGeneration, speed),\n    });\n  }\n\n  render() {\n    const {\n      generation,\n      cells,\n      speed,\n      rows,\n      columns,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__heading\">\n          Game\n          <span role=\"img\" aria-label=\"Smiling Face\">&#128515;</span>\n          f\n          Life\n        </h1>\n        <span className=\"app__generation\">\n          Generation -&nbsp;\n          {generation}\n        </span>\n        <MainControls\n          onPlayButtonClick={this.handlePlayButtonClick}\n          onPauseButtonClick={this.handlePauseButtonClick}\n          onResetButtonClick={this.handleResetButtonClick}\n          onClearButtonClick={this.handleClearButtonClick}\n        />\n        <Board cells={cells} />\n        <SpeedControls\n          onChange={this.handleSpeedChange}\n          speed={speed}\n        />\n        <BoardSizeControls\n          onChange={this.handleBoardSizeChange}\n          rows={rows}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { createElement } from 'react';\nimport { render } from 'react-dom';\n\nimport App from './components/App';\n\nimport '../node_modules/normalize.css/normalize.css';\n\nimport './index.css';\n\nrender(createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}